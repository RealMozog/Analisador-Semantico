<1: PRE, const>
<1: DEL, {>
<2: PRE, int>
<2: IDE, a>
<2: REL, =>
<2: NRO, 4>
<2: DEL, ;>
<3: PRE, boolean>
<3: IDE, aux1>
<3: REL, =>
<3: PRE, true>
<3: DEL, ;>
<4: PRE, real>
<4: IDE, numeroAux>
<4: REL, =>
<4: NRO, 4.478>
<4: DEL, ;>
<5: PRE, string>
<5: IDE, auxString>
<5: REL, =>
<5: CDC, "Testando">
<5: DEL, ;>
<6: DEL, }>
<7: PRE, var>
<7: DEL, {>
<8: PRE, int>
<8: IDE, auxNum>
<8: DEL, [>
<8: NRO, 2>
<8: DEL, ]>
<8: DEL, [>
<8: NRO, 10>
<8: DEL, ]>
<8: DEL, ,>
<8: IDE, testeNum>
<8: DEL, ,>
<8: IDE, next>
<8: DEL, ;>
<9: PRE, string>
<9: IDE, auxString>
<9: DEL, ;>
<10: PRE, typedef>
<10: PRE, struct>
<10: IDE, j>
<10: DEL, {>
<11: PRE, var>
<11: DEL, {>
<13: DEL, }>
<14: DEL, }>
<16: PRE, struct>
<16: IDE, istruct>
<16: PRE, extends>
<16: IDE, j>
<16: DEL, {>
<17: PRE, var>
<17: DEL, {>
<18: PRE, int>
<18: IDE, varia>
<18: DEL, ;>
<19: DEL, }>
<20: PRE, struct>
<20: IDE, inteiro>
<20: DEL, {>
<21: PRE, var>
<21: DEL, {>
<22: PRE, int>
<22: IDE, varia>
<22: DEL, ;>
<23: DEL, }>
<25: DEL, }>
<27: IDE, function>
<27: PRE, int>
<27: IDE, starti>
<27: DEL, (>
<27: DEL, )>
<27: DEL, {>
<28: PRE, var>
<28: DEL, {>
<29: PRE, int>
<29: IDE, numLocal>
<29: DEL, [>
<29: NRO, 5>
<29: DEL, ]>
<29: DEL, ;>
<30: PRE, real>
<30: IDE, numAux>
<30: DEL, ;>
<31: PRE, boolean>
<31: IDE, a>
<31: DEL, ;>
<32: DEL, }>
<33: IDE, numLocal>
<33: REL, =>
<33: NRO, 3>
<33: DEL, ;>
<34: IDE, numAux>
<34: REL, =>
<34: NRO, 1.1>
<34: DEL, ;>
<35: PRE, while>
<35: DEL, (>
<35: IDE, numLocal>
<35: REL, <>
<35: NRO, 3>
<35: DEL, )>
<35: DEL, {>
<36: IDE, a>
<36: REL, =>
<36: IDE, mudaNum>
<36: DEL, (>
<36: NRO, 3>
<36: DEL, )>
<36: DEL, ;>
<37: DEL, }>
<39: IDE, aumentaNum>
<39: DEL, (>
<39: IDE, a>
<39: DEL, )>
<39: DEL, ;>
<40: PRE, return>
<40: NRO, 0>
<40: DEL, ;>
<41: DEL, }>
<43: IDE, function>
<43: IDE, inteiro>
<43: IDE, mudaNum>
<43: DEL, (>
<43: PRE, int>
<43: IDE, a>
<43: DEL, )>
<43: DEL, {>
<44: PRE, var>
<44: DEL, {>
<45: PRE, struct>
<45: IDE, inteiro>
<45: PRE, extends>
<45: IDE, j>
<45: DEL, {>
<46: PRE, var>
<46: DEL, {>
<47: PRE, int>
<47: IDE, varia>
<47: DEL, ;>
<48: DEL, }>
<49: DEL, }>
<50: PRE, if>
<50: DEL, (>
<50: DEL, (>
<50: IDE, a>
<50: REL, ==>
<50: IDE, c>
<50: LOG, &&>
<50: IDE, a>
<50: REL, <=>
<50: IDE, d>
<50: DEL, )>
<50: DEL, )>
<50: PRE, then>
<50: DEL, {>
<51: IDE, a>
<51: ART, ++>
<51: DEL, ;>
<52: DEL, }>
<52: PRE, else>
<52: DEL, {>
<53: PRE, if>
<53: DEL, (>
<53: IDE, a>
<53: ART, ++>
<53: DEL, )>
<53: PRE, then>
<53: DEL, {>
<54: IDE, b>
<54: REL, =>
<54: IDE, a>
<54: DEL, .>
<54: IDE, besta>
<54: ART, *>
<54: NRO, 3>
<54: DEL, ;>
<55: DEL, }>
<55: PRE, else>
<55: DEL, {>
<56: PRE, if>
<56: DEL, (>
<56: IDE, a>
<56: REL, <>
<56: NRO, 10>
<56: DEL, )>
<56: PRE, then>
<56: DEL, {>
<57: IDE, a>
<57: REL, =>
<57: IDE, a>
<57: ART, +>
<57: NRO, 3>
<57: DEL, ;>
<58: DEL, }>
<59: DEL, }>
<60: DEL, }>
<61: PRE, return>
<61: IDE, a>
<61: DEL, ;>
<62: DEL, }>
<64: PRE, procedure>
<64: IDE, addNum>
<64: DEL, (>
<64: PRE, real>
<64: IDE, a>
<64: DEL, )>
<64: DEL, {>
<65: PRE, var>
<65: DEL, {>
<65: DEL, }>
<66: IDE, a>
<66: REL, =>
<66: IDE, a>
<66: ART, +>
<66: NRO, 20>
<66: DEL, ;>
<67: DEL, }>
